# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Java version to use for the release
  RELEASE_JAVA_VERSION: 8

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        java: [ 8, 11 ]

    name: Java ${{ matrix.java }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build and test with Maven
        run: mvn -B -Dgpg.skip -Drelease=true verify

  release:
    if: github.ref == 'refs/heads/master'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.RELEASE_JAVA_VERSION }}
          server-id: ossrh
          server-username: SONATYPE_USER
          server-password: SONATYPE_PW

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set version
        run: |
          VERSION=`git describe --match "v[0-9\.]*" --long --dirty --always`
          mvn -B versions:set -DnewVersion=${VERSION:1} -DgenerateBackupPoms=false

      - name: Release to Maven Central
        env:
          SONATYPE_USER: ${{ secrets.SONATYPE_USER }}
          SONATYPE_PW: ${{ secrets.SONATYPE_PW }}
        run: |
          cat <(echo -e "${{ secrets.GPG_KEY }}") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG
          mvn \
            --no-transfer-progress \
            --batch-mode \
            -Dgpg.passphrase="${{ secrets.GPG_PW }}" \
            -Drelease=true \
            -DskipTests \
            deploy
